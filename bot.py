import logging
import asyncio
import threading
from telegram.ext import ApplicationBuilder, CallbackQueryHandler  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ CallbackQueryHandler –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
from telegram import ReplyKeyboardMarkup  # Add import for ReplyKeyboardMarkup
from flask import Flask, render_template, request, redirect, url_for, jsonify
from handlers.start import get_start_handler
from handlers.analysis import get_analysis_handlers
from handlers.support import get_support_handler
from handlers.market import get_market_handler
from handlers.donate import get_donate_handler
from handlers.info import get_info_handler
from handlers.sentiment import get_sentiment_handler
from handlers.back import get_back_handler
from handlers.callback_handler import handle_callback
from database.database import create_tables, get_logs, get_support_messages, respond_to_support_message, get_support_message_by_id
from config.config import TELEGRAM_TOKEN as TOKEN
from logger import setup_logger
import nest_asyncio
from telegram.error import Conflict  # –î–æ–±–∞–≤—å—Ç–µ –∏–º–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
site_logger, bot_logger = setup_logger()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.basicConfig(level=logging.DEBUG)
logging.debug(f"Token: {TOKEN}")

create_tables()

app = Flask(__name__)
app.telegram_context = None
bot_running = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
bot_application = None  # –•—Ä–∞–Ω–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Application

# Define custom keyboard layouts
main_menu = [
    ["üìä –ê–Ω–∞–ª–∏–∑", "–†—ã–Ω–æ–∫"],
    ["–°–µ–Ω—Ç–∏–º–µ–Ω—Ç", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
    ["–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–î–æ–Ω–∞—Ç"]
]
back_button = [["–ù–∞–∑–∞–¥"]]

def get_main_menu():
    return ReplyKeyboardMarkup(main_menu, resize_keyboard=True)

def get_back_button():
    return ReplyKeyboardMarkup(back_button, resize_keyboard=True)

async def respond_to_user(user_id, response):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram."""
    if app.telegram_context:
        try:
            await app.telegram_context.bot.send_message(chat_id=user_id, text=response)
            bot_logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞."""
    global bot_application, bot_running
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not TOKEN or TOKEN.strip() == "":
        error_msg = "–¢–æ–∫–µ–Ω Telegram –Ω–µ —É–∫–∞–∑–∞–Ω. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω."
        bot_logger.critical(error_msg)
        bot_running = False
        raise ValueError(error_msg)
    
    bot_logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω Telegram: {TOKEN[:10]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        application = ApplicationBuilder().token(TOKEN).http_version("1.1").get_updates_http_version("1.1").build()
        app.telegram_context = application
        bot_application = application  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        bot_logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        try:
            await application.bot.set_my_commands([])  # Clear default commands
            bot_logger.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –±–æ—Ç–∞ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            bot_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        for handler in get_start_handler():  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
            application.add_handler(handler)
        
        for handler in get_analysis_handlers():
            application.add_handler(handler)
        
        application.add_handler(get_support_handler())
        application.add_handler(get_market_handler())
        application.add_handler(get_donate_handler())
        application.add_handler(get_info_handler())
        application.add_handler(get_sentiment_handler())
        application.add_handler(get_back_handler())
        application.add_handler(CallbackQueryHandler(handle_callback))
    
        bot_logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ CTRL+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        await application.run_polling(
            allowed_updates=["message", "callback_query", "inline_query"],
            drop_pending_updates=True,
            close_loop=False
        )
    except Conflict as e:
        bot_running = False
        bot_logger.error(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç: {str(e)}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.")
    except Exception as e:
        bot_running = False
        bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        raise
    finally:
        bot_logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è —Ä–∞–±–æ—Ç—ã asyncio –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ Flask
        nest_asyncio.apply()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞
        global bot_running
        bot_running = True
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            bot_logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            loop.run_until_complete(run_bot())
        except KeyboardInterrupt:
            bot_logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
        except Exception as e:
            bot_logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")
            # –ï—Å–ª–∏ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞
            bot_running = False
        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            loop.close()
            bot_logger.info("–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π asyncio –∑–∞–∫—Ä—ã—Ç")
    except Exception as e:
        bot_logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        bot_running = False

if __name__ == "__main__":
    main()
