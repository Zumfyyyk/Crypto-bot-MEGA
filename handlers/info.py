from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
import logging
import psutil
import platform
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    info_menu = [
        [KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"), KeyboardButton("üõ†Ô∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")],
        [KeyboardButton("üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"), KeyboardButton("üìú –ö–æ–º–∞–Ω–¥—ã")],
        [KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(info_menu, resize_keyboard=True)
    
    await update.message.reply_text(
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –±–æ—Ç–µ:",
        reply_markup=reply_markup
    )

async def show_about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="info")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = (
        "‚ÑπÔ∏è *–û –±–æ—Ç–µ*\n\n"
        "Crypto Bot Assistant ‚Äî —ç—Ç–æ Telegram-–±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, "
        "—Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –±–∏—Ä–∂–µ Bybit –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤, "
        "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä—ã–Ω–∫–∞ –∏ —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n"
        "–í–µ—Ä—Å–∏—è: 1.0.0\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ù–∏–∫–∏—Ç–∞ –•–∞—Ä—á–µ–Ω–∫–æ (Zumfyyyk)\n\n"
        "–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ä—ã–Ω–∫–∞—Ö, "
        "–≥—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
    )
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode="Markdown")

async def show_system_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_status")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        cpu_usage = psutil.cpu_percent()
        memory = psutil.virtual_memory()
        memory_usage = memory.percent
        uptime = datetime.now() - datetime.fromtimestamp(psutil.boot_time())
        uptime_str = str(uptime).split('.')[0]  # –ë–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
        
        message_text = (
            "üõ†Ô∏è *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*\n\n"
            f"üñ•Ô∏è CPU: {cpu_usage}%\n"
            f"üß† –ü–∞–º—è—Ç—å: {memory_usage}%\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n"
            f"üåê –û–°: {platform.system()} {platform.release()}\n"
            f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.machine()}\n\n"
            "–°—Ç–∞—Ç—É—Å: üü¢ –†–∞–±–æ—á–∏–π"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        message_text = (
            "üõ†Ô∏è *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*\n\n"
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–µ.\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode="Markdown")

async def show_how_to_use(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="info")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = (
        "üìö *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º*\n\n"
        "1Ô∏è‚É£ *–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
        "2Ô∏è‚É£ *–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:* –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ¬´–ê–Ω–∞–ª–∏–∑¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ "
        "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞.\n\n"
        "3Ô∏è‚É£ *–†—ã–Ω–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:* –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ¬´–†—ã–Ω–æ–∫¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ–ø —Ä–∞—Å—Ç—É—â–∏—Ö –∏ –ø–∞–¥–∞—é—â–∏—Ö "
        "–∞–∫—Ç–∏–≤–æ–≤, –∞ —Ç–∞–∫–∂–µ –æ–±—â–∏–π –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞.\n\n"
        "4Ô∏è‚É£ *–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞:* –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ¬´–°–µ–Ω—Ç–∏–º–µ–Ω—Ç¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ "
        "—Ä—ã–Ω–∫–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö.\n\n"
        "5Ô∏è‚É£ *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª "
        "–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.\n\n"
        "–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º."
    )
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode="Markdown")

async def show_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="info")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = (
        "üìú *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/analysis - –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –≥—Ä–∞—Ñ–∏–∫–∏\n"
        "/market - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–∫–µ\n"
        "/sentiment - –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞\n"
        "/support - –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "/donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n"
        "–ü–æ–º–∏–º–æ –∫–æ–º–∞–Ω–¥, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode="Markdown")

def get_info_handler():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    return CallbackQueryHandler(
        lambda update, context: (
            info_command(update, context) if update.callback_query.data == "info"
            else show_about_bot(update, context) if update.callback_query.data == "about_bot"
            else show_system_status(update, context) if update.callback_query.data == "system_status"
            else show_how_to_use(update, context) if update.callback_query.data == "how_to_use"
            else show_commands(update, context)
        ),
        pattern="^info|about_bot|system_status|how_to_use|commands$"
    )
