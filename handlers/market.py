from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
import logging
from services.bybit_api import fetch_top_gainers, fetch_top_losers, fetch_market_sentiment
from services.chart import generate_market_overview_chart

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

async def market_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Ä—ã–Ω–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏."""
    market_menu = [
        [KeyboardButton("üìà –†–∞—Å—Ç—É—â–∏–µ"), KeyboardButton("üìâ –ü–∞–¥–∞—é—â–∏–µ")],
        [KeyboardButton("üìä –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞"), KeyboardButton("üîç –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞")],
        [KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(market_menu, resize_keyboard=True)
    
    await update.message.reply_text(
        "üíπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–∫–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:",
        reply_markup=reply_markup
    )

async def show_top_gainers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø —Ä–∞—Å—Ç—É—â–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ç—É—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø-5 —Ä–∞—Å—Ç—É—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö
        gainers = await fetch_top_gainers(5)
        
        if not gainers or len(gainers) == 0:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="market")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ç—É—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö.",
                reply_markup=reply_markup
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        message_text = "üìà *–¢–æ–ø —Ä–∞—Å—Ç—É—â–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ (24—á)*\n\n"
        
        for i, ticker in enumerate(gainers):
            symbol = ticker['symbol'].split('/')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –ø–∞—Ä—ã (–±–µ–∑ /USDT)
            price = ticker['last']
            change = ticker['percentage'] * 100  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            
            message_text += f"{i+1}. *{symbol}*: ${price:.4f} ({change:+.2f}%)\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="top_gainers"),
                InlineKeyboardButton("üìâ –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–¥–∞—é—â–∏–µ", callback_data="top_losers")
            ],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="market")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ç—É—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="market")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
            reply_markup=reply_markup
        )

async def show_top_losers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø–∞–¥–∞—é—â–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø-5 –ø–∞–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö
        losers = await fetch_top_losers(5)
        
        if not losers or len(losers) == 0:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="market")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö.",
                reply_markup=reply_markup
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        message_text = "üìâ *–¢–æ–ø –ø–∞–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ (24—á)*\n\n"
        
        for i, ticker in enumerate(losers):
            symbol = ticker['symbol'].split('/')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –ø–∞—Ä—ã (–±–µ–∑ /USDT)
            price = ticker['last']
            change = ticker['percentage'] * 100  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            
            message_text += f"{i+1}. *{symbol}*: ${price:.4f} ({change:+.2f}%)\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="top_losers"),
                InlineKeyboardButton("üìà –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ç—É—â–∏–µ", callback_data="top_gainers")
            ],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="market")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="market")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
            reply_markup=reply_markup
        )

async def show_market_overview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–π –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö
        gainers = await fetch_top_gainers(10)
        
        if not gainers –∏–ª–∏ len(gainers) == 0:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="market")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ.",
                reply_markup=reply_markup
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞
        chart_buffer = await generate_market_overview_chart(gainers)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="market_overview"),
                InlineKeyboardButton("üìà –¢–æ–ø —Ä–∞—Å—Ç—É—â–∏—Ö", callback_data="top_gainers")
            ],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="market")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if chart_buffer:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
            await query.delete_message()
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=chart_buffer,
                caption="üìä *–û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç*\n\n–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            message_text = "üìä *–û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç*\n\n"
            
            for i, ticker in enumerate(gainers[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                symbol = ticker['symbol'].split('/')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –ø–∞—Ä—ã (–±–µ–∑ /USDT)
                price = ticker['last']
                change = ticker['percentage'] * 100  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                
                message_text += f"{symbol}: ${price:.4f} ({change:+.2f}%)\n"
            
            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="market")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞: {str(e)}",
            reply_markup=reply_markup
        )

def get_market_handler():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ä—ã–Ω–∫–∞."""
    return CallbackQueryHandler(market_command, pattern="^market$")
