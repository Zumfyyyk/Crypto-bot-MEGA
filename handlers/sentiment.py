from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
import logging
from services.bybit_api import fetch_market_sentiment, fetch_top_gainers, fetch_top_losers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

async def sentiment_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞."""
    sentiment_menu = [
        [KeyboardButton("üìà –¢–æ–ø —Ä–∞—Å—Ç—É—â–∏—Ö"), KeyboardButton("üìâ –¢–æ–ø –ø–∞–¥–∞—é—â–∏—Ö")],
        [KeyboardButton("üìä –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞"), KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(sentiment_menu, resize_keyboard=True)
    
    await update.message.reply_text(
        "üîç –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    
    query = update.callback_query
    if query:
        await query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    if query:
        await query.edit_message_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞...")
    else:
        await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ä—ã–Ω–∫–∞
        sentiment = await fetch_market_sentiment()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø —Ä–∞—Å—Ç—É—â–∏—Ö –∏ –ø–∞–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö
        gainers = await fetch_top_gainers(3)  # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3
        losers = await fetch_top_losers(3)
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∞—Å—Ç—É—â–∏—Ö –∏ –ø–∞–¥–∞—é—â–∏—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        if gainers and losers:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ç–æ–ø–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
            avg_gainers_change = sum(ticker['percentage'] * 100 for ticker in gainers) / len(gainers)
            avg_losers_change = sum(ticker['percentage'] * 100 for ticker in losers) / len(losers)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if avg_gainers_change > abs(avg_losers_change) * 1.5:
                market_mood = "üü¢ *–ë—ã—á—å–µ*"
                description = "–†—ã–Ω–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∏–ª—å–Ω–æ–µ –±—ã—á—å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤ —Ä–∞—Å—Ç–µ—Ç."
            elif abs(avg_losers_change) > avg_gainers_change * 1.5:
                market_mood = "üî¥ *–ú–µ–¥–≤–µ–∂—å–µ*"
                description = "–†—ã–Ω–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∏–ª—å–Ω–æ–µ –º–µ–¥–≤–µ–∂—å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤ –ø–∞–¥–∞–µ—Ç."
            else:
                market_mood = "üü° *–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ*"
                description = "–†—ã–Ω–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã. –ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è."
        else:
            market_mood = "‚ö™ *–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ*"
            description = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        message_text = (
            "üîç *–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞*\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {market_mood}\n\n"
            f"{description}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø —Ä–∞—Å—Ç—É—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö
        if gainers and len(gainers) > 0:
            message_text += "üìà *–¢–æ–ø —Ä–∞—Å—Ç—É—â–∏—Ö –∞–∫—Ç–∏–≤–æ–≤:*\n"
            for ticker in gainers:
                symbol = ticker['symbol'].split('/')[0]
                change = ticker['percentage'] * 100
                message_text += f"‚Ä¢ {symbol}: {change:+.2f}%\n"
            message_text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø –ø–∞–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö
        if losers and len(losers) > 0:
            message_text += "üìâ *–¢–æ–ø –ø–∞–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–æ–≤:*\n"
            for ticker in losers:
                symbol = ticker['symbol'].split('/')[0]
                change = ticker['percentage'] * 100
                message_text += f"‚Ä¢ {symbol}: {change:+.2f}%\n"
            message_text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        if market_mood == "üü¢ *–ë—ã—á—å–µ*":
            message_text += (
                "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
                "‚Ä¢ –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –¥–ª–∏–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n"
                "‚Ä¢ –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –∞–∫—Ç–∏–≤—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–æ—Å—Ç–æ–º\n"
                "‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã"
            )
        elif market_mood == "üî¥ *–ú–µ–¥–≤–µ–∂—å–µ*":
            message_text += (
                "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
                "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n"
                "‚Ä¢ –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏\n"
                "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É—Ä–æ–≤–Ω—è–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤"
            )
        else:
            message_text += (
                "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
                "‚Ä¢ –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, —Ä—ã–Ω–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
                "‚Ä¢ –¢–æ—Ä–≥—É–π—Ç–µ —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º, —á–µ–º –æ–±—ã—á–Ω–æ\n"
                "‚Ä¢ –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã, –∞ –Ω–µ –Ω–∞ –≤–µ—Å—å —Ä—ã–Ω–æ–∫"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="sentiment"),
                InlineKeyboardButton("üíπ –†—ã–Ω–æ–∫", callback_data="market")
            ],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query:
            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞: {str(e)}"
        
        if query:
            await query.edit_message_text(message_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup)

def get_sentiment_handler():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞."""
    return CallbackQueryHandler(sentiment_command, pattern="^sentiment$")
